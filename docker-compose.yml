# Definimos los servicios que vamos a tener
services:
  # Primer servicio
  iptables:
    # Indicamos que se debe de construir la imagen para este servicio
    build:
      # El Dockerfile se encuentra en este directorio
      context: ./ipTables # Especificamos el nombre del archivo dentro del directorio (contexto)
      dockerfile: Dockerfile
    # Nos permite agregar ciertos privilegios sobre la maquina anfitriona (SUPER IMPORTANTE PERO TAMBIÉN PUEDE LLEGAR A SER PELIGROSO)
    cap_add:
    # Para poder realizar operaciones relacionadas con la red
    - NET_ADMIN
    # Para poder realizar operaciones relacionadas con los paquetes de red
    - NET_RAW
    # Esto se hace para que el contenedor utilice "la pila de red" del host, esta pila de red es un conjunto de protocolos de comunicación
    # organizados en capas
    network_mode: "host"
    # Solo se va a reiniciar si se detiene con un código de error distinto a cero (indicando que hubo un error)
    restart: on-failure
    # Comando que se ejecutara al iniciar el contenedor
    command: ["/bin/bash", "./ipTablesConf.sh"]

  # Segundo servicio
  bind:
    # Indicamos que se debe de construir la imagen para este servicio
    build:
      # El Dockerfile se encuentra en este directorio
      context: ./DNSbind
      # Especificamos el nombre del archivo dentro del directorio (contexto)
      dockerfile: Dockerfile
    # Para que el puerto del contenedor (el que expusimos) sea accesible desde la maquina anfitriona, a esto se le llama "mapear un puerto",
    # en este caso del host al puerto del contenedor, es como si fuera un puente entre estos 2 puertos
    ports:
      # Utilizamos 127.0.0.1 ya que es el "localhost" de la maquina anfitriona (para que este contenedor solo sea accesible desde esta)
      # Formato PUERTO_HOST:PUERTO_CONTENEDOR para tcp y udp ya que este contenedor expone estos 2 puertos
      - "127.0.0.1:53:53/tcp"
      - "127.0.0.1:53:53/udp"
    # Le asignamos una IP estática al contenedor dentro de la red llamada "proyecto" (declarada después)
    networks:
      proyecto:
        ipv4_address: 192.168.0.2 # IP asignada al servidor BIND, por ende, la IP de nuestro DNS
    # Definimos el orden de inicio para nuestros servicios, en donde iptables debe de estar iniciado antes de que BIND pueda estarlo        
    depends_on:
      - iptables
    # Siempre se reiniciara el contenedor si este se detiene
    restart: always

  # Tercer servicio
  apache:
    # Indicamos que se debe de construir la imagen para este servicio
    build:
      # El Dockerfile se encuentra en este directorio
      context: ./virtualHostApache
      # Especificamos el nombre del archivo dentro del directorio (contexto) 
      dockerfile: Dockerfile
    # Para que el puerto del contenedor (el que expusimos) sea accesible desde la maquina anfitriona, a esto se le llama "mapear un puerto",
    # en este caso del host al puerto del contenedor, es como si fuera un puente entre estos 2 puertos
    ports:
      - "80:80" # Formato PUERTO_HOST:CONTENEDOR_HOST
    # Le asignamos una IP estática al contenedor dentro de la red llamada "proyecto" (declarada después)      
    networks:
      proyecto:
        ipv4_address: 192.168.0.3 # IP asignada al servidor Apache
    # Utilizamos el servidor BIND para nuestro DNS
    dns:
      - 192.168.0.2
    # Definimos el orden de inicio para nuestros servicios
    depends_on:
      - iptables
      - bind
    # Siempre se reiniciara el contenedor si este se detiene
    restart: always

  # Cuarto servicio
  squid:
    # Indicamos que se debe de construir la imagen para este servicio
    build:
      # El Dockerfile se encuentra en este directorio
      context: ./proxySquid
      # Especificamos el nombre del archivo dentro del directorio (contexto)
      dockerfile: Dockerfile
    # Para que el puerto del contenedor (el que expusimos) sea accesible desde la maquina anfitriona, a esto se le llama "mapear un puerto",
    # en este caso del host al puerto del contenedor, es como si fuera un puente entre estos 2 puertos
    ports:
      - "3128:3128" # Formato PUERTO_HOST:CONTENEDOR_HOST
    # Agregamos nuestra red llamada "proyecto" (declarada después)
    networks:
      proyecto:
        ipv4_address: 192.168.0.4 # IP asignada al contenedor squid
    # Utilizamos el servidor BIND para nuestro DNS
    dns:
      - 192.168.0.2
    # Definimos el orden de inicio para nuestros servicios
    depends_on:
      - iptables
      - bind
      - apache
    # Siempre se reiniciara el contenedor si este se detiene
    restart: always

  # Quinto servicio (Contenedor para la 2da regla)
  servidorFTP:
    # Utilizamos una imagen ya construida desde Docker Hub, ver https://shorturl.at/Xaz7t
    image: stilliard/pure-ftpd
    # Mapeamos el puerto del contenedor hacia el de la maquina host, en este caso el puerto 21
    ports:
      - "21:21"
      # Mapeamos un rango de puertos para el modo pasivo de nuestro servidor FTP, ver https://shorturl.at/zCeFP
      - "30000-30009:30000-30009"
    networks:
      proyecto:
        ipv4_address: 192.168.0.5
    # Definimos las siguientes variables de entorno
    environment:
      # IP de la maquina anfitriona
      PUBLICHOST: "192.168.1.85"
      # Usuario y contraseña para el usuario en nuestro servidor
      FTP_USER_NAME: "servidorPrueba"
      FTP_USER_PASS: "servidorPrueba"
      # Especificamos el directorio para el usuario
      FTP_USER_HOME: "/home/servidorPrueba"
    # Nos aseguramos que todos los anteriores se hayan levantado correctamente antes de iniciar este
    depends_on:
      - iptables
      - bind
      - apache
      - squid
    restart: always

  # Sexto servicio (Contenedor de prueba para la 3ra regla)
  notraficosalida:
    # Indicamos que se debe de construir la imagen para este servicio
    build:
      # Indicamos en que directorio y como se llama el archivo para crear la imagen
      context: ./imagenCompartida
      dockerfile: Dockerfile
    networks:
      proyecto:
        # Asignamos la IP dentro del rango prohibido en la regla 3 (192.168.0.70-192.168.0.160)
        ipv4_address: 192.168.0.77 
    # Nos aseguramos que todos los contenedores se inicien correctamente
    depends_on:
      - iptables 
      - bind
      - apache
      - squid
      - servidorFTP
    # En caso de que se pare, se va a reiniciar siempre
    restart: always
    # Comando para mantener el contenedor corriendo
    command: ["tail", "-f", "/dev/null"]

  # Séptimo servicio (contenedor de prueba para la 5ta regla)
  servidorSMTP:
    # Utilizamos nuevamente una imagen ya construida para una simple prueba del servidor, ver https://shorturl.at/jPkCa
    image: haravich/fake-smtp-server
    ports:
      # IMPORTANTE mapear los puertos del contenedor a los de la maquina host, ya que estos se necesitan para hacer
      # el telnet <IP_MAQUINA_ANFITRIONA> 25
      - "25:1025" # Esta imagen expone el puerto 1035, el 1080 es para la interfaz web de los correros recibidos
    networks:
      proyecto:
        ipv4_address: 192.168.0.6 # IP asignada al servidor
    # Nos aseguramos de que los contenedores anteriores se inicien correctamente
    depends_on:
      - iptables
      - bind
      - apache
      - squid
      - notraficosalida
    restart: always

  # Octavo servicio (Contenedor de prueba para la 7ma regla)
  bloqueopuertohttps:
    # Indicamos que se debe de construir la imagen para este servicio
    build:
      # Indicamos en que directorio y como se llama el archivo para crear la imagen
      context: ./imagenCompartida
      dockerfile: Dockerfile
    networks:
      proyecto:
        # Asignamos la IP fuera del rango prohibido en la regla 3 (192.168.0.70-192.168.0.160) para que se vea que efectivamente
        # el puerto 443 ha sido bloqueado
        ipv4_address: 192.168.0.165 
    # Nos aseguramos que todos los contenedores se inicien correctamente
    depends_on:
      - iptables 
      - bind
      - apache
      - squid
      - servidorFTP
      - servidorSMTP
      - notraficosalida
    # En caso de que se pare, se va a reiniciar siempre
    restart: always
    # Comando para mantener el contenedor corriendo
    command: ["tail", "-f", "/dev/null"]    

  # Noveno servicio (servidor SSH)
  servidorSSH:
    # Utilizamos una imagen ya construida para el servidor, ver https://shorturl.at/7VLlv
    image: linuxserver/openssh-server
    ports:
      - "2222:2222" # Mapea el puerto 2222 del host al puerto 22 del contenedor
    networks:
      proyecto:
        ipv4_address: 192.168.0.8 # IP asignada al servidor SSH
    environment:
      # Usuario y contraseña para el usuario en el servidor
      - USER_NAME=testuser 
      - USER_PASSWORD=testpassword 
      # Permite el acceso con contraseña
      - PASSWORD_ACCESS=true 
    depends_on:
      - iptables 
      - bind
      - apache
      - squid
      - servidorFTP
      - servidorSMTP
      - bloqueopuertohttps
    restart: on-failure


# Creamos nuestra red
networks:
  proyecto:
    # Ver https://shorturl.at/QFH4A para mejor entendimiento sobre este driver
    driver: bridge
    # IP address management nos deja configurar como se asignan las direcciones en la red
    ipam:
      config:
        # Definimos el rengo de direcciones, en este caso utilizamos /24 pero en realidad puede ser como sea
        - subnet: 192.168.0.0/24
          # Especifica la dirección IP de la puerta de enlace para esta subred
          gateway: 192.168.0.1